name: NSIS

on:
  push:
    branches:
      - main
      - master

env:
  BUILD_TYPE: Release

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      if: github.event_name == 'schedule'
    - name: Create tag
      id: create_tag
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          tag=v$(date +%Y%m%d.%H%M%S)
        else
          tag=$(basename "${{ github.ref }}")
        fi
        echo "::set-output name=tag::$tag"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag }}
        release_name: ${{ steps.create_tag.outputs.tag }}
        draft: true
        prerelease: false

  install_nsis:
    runs-on: windows-latest
    steps:
    - name: Install NSIS
      run: |
        iwr -useb get.scoop.sh -outfile 'install.ps1'
        .\install.ps1 -RunAsAdmin
        scoop update
        scoop bucket add extras
        scoop install nsis

  build:
    needs: [release, install_nsis]
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        name: [ head, debug ]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.12

    - name: Setup Fortran
      uses: awvwgk/setup-fortran@main
      id: setup-fortran
      with:
        compiler: gcc
        version: 11

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Package
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Package the installer
      run: cpack -C $BUILD_TYPE

    - name: Upload the installer
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/Moordyn-2.0.0-win64.exe
        asset_name: Windows installer
        tag: ${{ github.ref }}
        overwrite: true
        body: "Windows installer with the C/C++ and Fortran libraries"
